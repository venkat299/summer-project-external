# ai_interviewer/models/schemas.py

"""
Defines the Pydantic data structures used for type safety and validation
throughout the AI Interviewer application. These models ensure that data
exchanged between different components (e.g., API routes, core logic)
is consistent and adheres to a predefined structure.
"""

from pydantic import BaseModel, Field
from typing import List, Dict
import time

class SessionState(BaseModel):
    """
    Represents the complete state of a single interview session.
    This object is created when a session starts and is updated after each
    question-answer cycle.
    """
    session_id: str
    current_node_id: str
    interview_history: List[Dict] = Field(default_factory=list)
    skill_scores: Dict[str, float] = Field(default_factory=dict)
    start_time: float = Field(default_factory=time.time)

class TriageResult(BaseModel):
    """
    Represents the immediate, high-level analysis of a candidate's answer.
    This is generated by the fast triage LLM to quickly decide the next
    step in the interview flow.
    """
    signal: str  # e.g., "correct", "incorrect", "partial", "clarification_needed"
    confidence: float
